program backend;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  System.SysUtils, Horse,Horse.Compression, Horse.Jhonson, Horse.Commons,
  Horse.BasicAuthentication, Horse.HandleException,  System.JSON;

var
  Users : TJSONArray;
  APP : THorse;

begin
  APP := THorse.Create(9000); // porta do servidor
  Users := TJSONArray.Create;
  APP.Use(Compression()).
  Use(Jhonson()).
  Use(HandleException).
  Use(HorseBasicAuthentication(
    function(const AUsername, APassword: string): Boolean
    begin
      Result := AUsername.Equals('user') and APassword.Equals('pass');
    end)
  );

  APP.Get('/ping',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var
      I: Integer;
      LPong: TJSONArray;
    begin
      LPong := TJSONArray.Create;
      for I := 0 to 1000 do
        LPong.Add(TJSONObject.Create(TJSONPair.Create('ping '+i.ToString, 'pong')));
      Res.Send(LPong);
    end
  );

  APP.Get('/exception',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var
      LConteudo: TJSONObject;
    begin
      raise EHorseException.Create('MY BAD !');
      LConteudo := TJSONObject.Create;
      LConteudo.AddPair('Nome','Raulzinho');
      Res.Send<TJSONObject>(LConteudo);
    end);


  APP.Get('/users',
    // req = requisição | res = response.
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    begin
      Res.Send<TJSONArray>(Users);
    end
  );

  APP.Post('/users',
    // req = requisição | res = response.
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var
      User : TJSONObject;
    begin
      User := Req.Body<TJSONObject>.Clone as TJSONObject;
      Users.AddElement(User);
      Res.Send<TJSONAncestor>(User.Clone).Status(THTTPStatus.created); // 201 = created. Por default estava retornando 200.
    end
  );

  APP.Delete('/users/:id',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var
      id: Integer;
    begin
      id := Req.Params.Items['id'].ToInteger;
      Users.Remove(id - 1).Free;
      Res.Send<TJSONAncestor>(Users.Clone).Status(THTTPStatus.NoContent);
    end
  );

  APP.Start;
  // FreeAndNil(Users); não é necessário limpar memória pois o Jhonson cuida disso.
end.
